#!/usr/bin/env python3

'''

Build the genome indices for te_count

'''

import sys, os, argparse, logging

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import te_count.genome

# Command-line options;
def prepare_parser():
    exmp = 'Example usage: te_genome -g genome -m mode'

    description = 'Builds the indices for te_count'

    parser = argparse.ArgumentParser(prog='te_genome', description=description, epilog=exmp)

    optional = parser._action_groups.pop()
    optional.add_argument('--gtf', nargs=1, required=False, help='if mode=custom, a gtf file to get the annotations from')
    optional.add_argument('-f', action='store_true', required=False, help='Force a rebuild, even if the genome is already present')

    required = parser.add_argument_group('required arguments')
    required.add_argument('-m', '--mode', nargs=1, required=True, help='Type of annotation to use, valid modes: {0}'.format(te_count.common.valid_modes))
    required.add_argument('-g', '--genome', nargs=1, required=True, help='Genome assembly to use, valid genomes: {0}'.format(te_count.common.valid_assemblies))

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')
    parser.log = logging.getLogger('te_genome')

    return parser

def main():
    assert sys.version_info >= (3, 6), 'Python >=3.6 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log
    log.info('Arguments:')
    log.info('  genome: "%s"' % args.genome[0])
    log.info('  mode  : %s' % args.mode[0])
    if args.gtf:
        log.info('  gtf   : %s' % args.gtf[0])

    if args.mode[0] == 'custom':
        # check gtf is a valid arg
        assert args.gtf[0], '--gtf must be a valid filename if mode=custom'

        if not os.path.exists(args.gtf[0]):
            raise AssertionError('--gtf file not found')
        log.info('Using {} as the genome name'.format(args.genome[0]))

        idx = te_count.te_genome.index()
        idx.build_index(args.genome[0], 'custom', log, args.gtf[0])

    else: # USe a pre-packaged genome
        log.info('Finding prepackaged Genome')
        genome = args.genome[0]

        filename = te_count.genome.check_genome_available(genome, args.mode[0])
        if filename and not args.f:
            log.error('{}/{} genome already built "{}"'.format(genome, args.mode[0], filename))
            sys.exit()

        log.info('{}/{} genome not found, building'.format(genome, args.mode[0]))

        idx = te_count.te_genome.index()
        idx.build_index(genome, args.mode[0], log)
    log.info('Done')

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
