#!/usr/bin/env python3

'''

A very simple counter for

'''

import sys, os, argparse, logging
import glbase3 # glbase3 namespace mangling!
import pysam

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import te_count

# Command-line options;
def prepare_parser():
    exmp = 'Example usage: te_count -i in.bam -o out.bam -g genome -m genes_tes'

    description = 'Counts up the number of reads that overlap some set of gene/TE or other features'

    parser = argparse.ArgumentParser(prog='te_count', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('--se', action='store_true', required=False, help='Set mode to SE (single-end) mode, default is paired-end mode')
    optional.add_argument('--sc', action='store_true', required=False, help='Set te_count to single-cell mode, default is bulk. Expects an CR:Z flag in the BAM/SAM file. Make sure you set --se appropriately')
    optional.add_argument('--noumi', action='store_true', required=False, help='If --sc is set, but this single cell data has no UMI in a UR:Z tag, set this switch')
    optional.add_argument('-q', '--qual', nargs=1, type=int, default=20, required=False, help='q threshold for qulait filtering, default=20')
    optional.add_argument('--maxcells', nargs=1, type=int, default=10000, required=False, help='keep at most maxcells with the most reads, default=10000')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-i', '--inbam', nargs=1, required=True, help='the BAM alignment file containing the reads')
    required.add_argument('-o', '--outtsv', nargs=1, required=True, help='the TSV file to save the genes and count data to')
    required.add_argument('-g', '--genome', nargs=1, required=True, help='Genome assembly to use, valid genomes: {0}'.format(te_count.common.valid_assemblies))
    required.add_argument('-m', '--mode', nargs=1, required=True, help='Type of annotation to use, valid modes: {0}'.format(te_count.common.valid_modes))

    parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('te_count')

    return parser

def main():
    assert sys.version_info >= (3, 6), 'Python >=3.6 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log

    log.info('Arguments:')
    log.info('  inbam: %s' % args.inbam[0])
    log.info('  outtsv: %s' % args.outtsv[0])
    log.info('  genome: "%s"' % args.genome[0])
    log.info('  mode: "%s"' % args.mode[0])
    log.info('  single-end mode: {0} (default is PE)'.format(args.se))
    log.info('  quality thresold: {0} (default is 20)'.format(args.qual))
    if args.sc:
        log.info('  single cell mode: {0} (default is False/Bulk)'.format(args.sc))
        log.info('  maxcells: {0} (default is 10000)'.format(args.maxcells[0]))
        log.info('  No UMI: {0} (default is False)'.format(args.noumi))

    log.info('Finding Genome')
    genome = args.genome[0]
    if not te_count.genome.check_genome_available(genome, args.mode[0]):
        log.error('{0}/{1} genome not found, please run te_build'.format(genome, args.mode[0]))
        te_count.common.print_genomes(log=log)
        sys.exit()
    log.info('Found Genome {0}/{1}'.format(genome, args.mode[0]))

    mte = te_count.measureTE(sys.argv[0], args.qual)
    mte.bind_genome(os.path.join(script_path, '../te_count/genome/{0}_{1}.glb'.format(genome, args.mode[0])))
    log.info('Found and loaded {0} genome {1}'.format(args.genome[0], args.mode[0]))

    if args.sc:
        result = mte.sc_parse_bamse(args.inbam[0], UMIS=not args.noumi, log=log)
        mte.sc_save_result(result, args.outtsv[0], args.maxcells[0], log=log)
    else:
        if args.se:
            result = mte.parse_bamse(args.inbam[0], log=log)
        else:
            result = mte.parse_bampe(args.inbam[0], log=log)
        mte.save_result_bulk(result, args.outtsv[0], log=log)
    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
